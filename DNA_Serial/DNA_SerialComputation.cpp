/* ============================================================================ Name        : DNA_SerialComputation.cpp Author      : Douglas Version     : Copyright   : Your copyright notice Description : DNA Serial ============================================================================ */#include <math.h> #include "mpi.h" #include <iostream>#include <stdlib.h>#include "DNAStrandHelper.h"#include <string>#include <sstream>using namespace std; // Checking functions for the inputsbool is_number( string& s);bool checkForDouble(string & s);int main(int argc, char *argv[]) {	int length = 10;	int dataSize = 100;	int clusterNum = 5;	double threshold = 0.001;	int iteration = 1000;	string fileName;	string enter;	cout << "Starting the DNA Serial Clustering" << endl;	cout << "Enter in the length of the DNA strand : " ;	cin >> enter;	if(!is_number(enter)){		cout << "Number value is needed. Please try again." << endl;		return 0;	} else {		length = atoi(enter.c_str());	}	cout << "Enter in the size for the DATA :  " ;	cin >> enter;	if(!is_number(enter)){		cout << "Number value is needed. Please try again." << endl;		return 0;	} else {		dataSize = atoi(enter.c_str());	}	cout << "Enter in the Centroid number : " ;	cin >> enter;	if(!is_number(enter)){		cout << "Number value is needed. Please try again." << endl;		return 0;	} else {		clusterNum = atof(enter.c_str());	}	cout << "Enter in the threshold : " ;	cin >> enter;	if(!checkForDouble(enter)){		cout << "Number value is needed. Please try again." << endl;		return 0;	} else {		threshold = atof(enter.c_str());	}	cout << "Enter in the max iteration : ";	cin >> enter;	if(!is_number(enter)){		cout << "Number value is needed. Please try again." << endl;		return 0;	} else {		iteration = atoi(enter.c_str());	}	cout << "Enter in the output Filename : ";	cin >> enter;	fileName = enter;	// Initializing the helper	DNAStrandHelper *helper = new DNAStrandHelper(length, dataSize, clusterNum);	// Initializing the arrays.	char **data = new char*[dataSize]; // where the data lives	int *cluster = new int[dataSize]; // where the cluster classification lives	char **centriods;	cout << "Generating Data"<<endl;	// Generating the data	for(int i = 0; i < dataSize ; i++){		char* oneStrand = helper->getRamdomDNAStrand();		data[i]=oneStrand;	}	cout<< "Done generating." << endl;	centriods = helper->pickCentriods(data);	time_t start, end;	time (&start); //useful call	cout << "Starting timer for RANK = 0" << endl;	helper->findCluster(data, centriods, cluster, threshold, iteration);	time (&end);//useful call	cout.precision(15);	double diff = difftime(end,start);//this will give you time spent between those two calls.	cout << "TIME PAST in Seconds = " << fixed <<diff<< endl;	cout << "Printing to file" << endl;	helper->printAllWithCluster(data,cluster, fileName);	cout << "Done printing." << endl;	// deleting all allocation	for(int i = 0; i < dataSize ; i++){		delete[] data[i];	}	for(int i = 0; i < clusterNum; i++){		delete[] centriods[i];	}	delete[] centriods;	delete[] cluster;	delete[] data;	return 0;}bool is_number( string& s){    string::const_iterator it = s.begin();    while (it != s.end() && std::isdigit(*it)) ++it;    return !s.empty() && it == s.end();}bool checkForDouble(string & s) {  istringstream ss(s);  double d;  return (ss >> d) && (ss >> std::ws).eof();}